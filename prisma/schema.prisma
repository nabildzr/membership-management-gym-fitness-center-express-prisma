// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  password    String
  phoneNumber String?
  membership  Membership? @relation(fields: [membershipId], references: [id])
  membershipId String?
  payments    Payment[]
  bookings    Booking[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Membership {
  id           String  @id @default(cuid())
  name         String
  price        Float
  durationInDays Int
  users        User[]
  payments     Payment[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Payment {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  membership     Membership @relation(fields: [membershipId], references: [id])
  membershipId   String
  amountPaid     Float
  paymentMethod  String
  paymentStatus  String
  transactionDate DateTime @default(now())
  validUntil     DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Trainer {
  id             String  @id @default(cuid())
  name           String
  specialization String
  experienceYears Int
  contactInfo    String?
  classes        Class[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Class {
  id             String  @id @default(cuid())
  trainer        Trainer @relation(fields: [trainerId], references: [id])
  trainerId      String
  className      String
  scheduleTime   DateTime
  maxParticipants Int
  bookings       Booking[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Booking {
  id             String  @id @default(cuid())
  user           User    @relation(fields: [userId], references: [id])
  userId         String
  class          Class   @relation(fields: [classId], references: [id])
  classId        String
  bookingStatus  String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
